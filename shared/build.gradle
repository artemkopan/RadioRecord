apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.squareup.sqldelight'
apply plugin: 'com.android.library'

// It is necessary because we need to have access to context on CommonCode to use SQLDelight database
android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName '1.0'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    // By default the android gradle plugin expects to find the kotlin source files in
    // the folder `main` and the test in the folder `test`. This is to be able place
    // the source code files inside androidMain and androidTest folders
    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
        test {
            java.srcDirs = ['src/androidTest/kotlin']
            res.srcDirs = ['src/androidTest/res']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}



kotlin {
    targets {
        // iPhone simulator    : presets.iosX64
        // real iDevice 32 bit : presets.iosArm32
        // real iDevice 64 bit : presets.iosArm64
//        def iosPreset = presets.iosX64

//        fromPreset(iosPreset, 'ios') {
//            binaries {
//                framework {
//                    // Disable bitcode embedding for the simulator build.
//                    if (iosPreset == presets.iosX64) {
//                        embedBitcode("disable")
//                    }
//                }
//            }
//            //compilations.main.outputKinds('FRAMEWORK')
//            compilations.each {
//                it.extraOpts("-linkerOpts", "-lsqlite3")
//            }
//        }

        fromPreset(presets.android, 'android')

    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'

            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"

            // SERIALIZATION
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializer_version"

            // KTOR
            implementation "io.ktor:ktor-client-core:$ktor_version"
            implementation "io.ktor:ktor-client-json:$ktor_version"
            implementation "io.ktor:ktor-client-serialization:$ktor_version"
            implementation "io.ktor:ktor-client-logging:$ktor_version"
        }

        androidMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

            // COROUTINE
            api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
            api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"

            // SERIALIZATION
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializer_version"

            // KTOR
            implementation "io.ktor:ktor-client-okhttp:$ktor_version"
            implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
            implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
            implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"

            // SQL Delight
            implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"

            // INJECT
            implementation("javax.inject:javax.inject:$injecx_version")

            // ANDROIDX
            implementation "androidx.fragment:fragment-ktx:$fragment_version"
            implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
            implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"

            // DI
            implementation "com.google.dagger:dagger:$dagger_version"
            compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$dagger_assisted_version"

        }

        iosMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutine_version"

            // SERIALIZATION
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serializer_version"

            // KTOR
            implementation "io.ktor:ktor-client-ios:$ktor_version"
            implementation "io.ktor:ktor-client-core-native:$ktor_version"
            implementation "io.ktor:ktor-client-json-native:$ktor_version"
            implementation "io.ktor:ktor-client-serialization-native:$ktor_version"
            implementation "io.ktor:ktor-client-logging-native:$ktor_version"


            // SQL Delight
            implementation "com.squareup.sqldelight:ios-driver:$sqldelight_version"
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')

                // actually not needed, see https://youtrack.jetbrains.com/issue/KT-31189
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializer_version"
            }
        }

    }
}


task packForXCode {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"
    //dependsOn "linkMainDebugFrameworkIOS"

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'shared.framework/**'
            include 'shared.framework.dSYM'
        }
    }
}


sqldelight {
    Database {
        packageName = "io.radio"
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}